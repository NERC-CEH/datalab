---
# Vagrant is able to provision Ansible into a new VM but requires a playbook
# to be supplied as a parameter.
# Given we don't actually want to provision any software into the control
# VM at the current time we aer just supplying an emtpy playbook
- hosts: all
  become: yes
  become_method: sudo
  vars:
    terraform_version: "0.12.4"
  tasks:
    - name: Generate en_GB locale
      locale_gen:
        name: en_GB.UTF-8
        state: present

    - name: Install build-essential
      apt:
        name: build-essential
        state: present

    - name: Install unzip
      apt:
        name: unzip
        state: present

    - name: Install libffi-dev
      apt:
        name: libffi-dev
        state: present

    - name: Install libssl-dev
      apt:
        name: libssl-dev
        state: present

    - name: Install libxml2-dev
      apt:
        name: libxml2-dev
        state: present

    - name: Install libxslt-dev
      apt:
        name: libxslt-dev
        state: present

    - name: Install python-dev
      apt:
        name: python-dev
        state: present

    - name: Install python-pip
      apt:
        name: python-pip
        state: present
    
    - name: Install xmltodict
      pip: name=xmltodict

    - name: Install jmespath
      pip: name=jmespath

    - name: Install OpenStack tools
      pip:
        name: python-openstackclient
        version: 3.15.0

    - name: Install Shade (required by OpenStack)
      pip:
        name: shade
        version: 1.27.1

    - name: Install os-client-config (required for OpenStack dynamic inventory)
      pip:
        name: os-client-config
        version: 1.29.0

    - name: Install python3-pip
      apt:
        name: python3-pip
        state: present
    
    - name: Install funcsigs
      pip: name=funcsigs

    - name: Install monotonic
      pip: name=monotonic

    - name: Install cryptography
      pip: name=cryptography

    # Install Terraform
    - name: Check Terraform version
      shell: "terraform --version | head -n1 | grep {{ terraform_version }}"
      failed_when: False
      changed_when: False
      register: current_terraform_version

    - name: Determine Terraform checksums
      uri: url="https://releases.hashicorp.com/terraform/{{ terraform_version }}/terraform_{{ terraform_version }}_SHA256SUMS"
           method="GET"
           return_content=True
      register: terraform_checksums

    - name: Download Terraform
      get_url: url="https://releases.hashicorp.com/terraform/{{ terraform_version }}/terraform_{{ terraform_version }}_linux_amd64.zip"
               dest="/usr/local/src/terraform_{{ terraform_version }}_linux_amd64.zip"
               checksum="sha256:{{ item.split(' ') | first }}"
      with_items: "{{ terraform_checksums.content.split('\n') | select('search', 'linux_amd64') | list | first }}"
      register: terraform_downloaded

    - name: Extract and install Terraform
      unarchive: src="/usr/local/src/terraform_{{ terraform_version }}_linux_amd64.zip"
                 dest=/usr/local/bin
                 copy=no
      when: current_terraform_version.rc != 0 or terraform_downloaded is changed
    # End Install Terraform
