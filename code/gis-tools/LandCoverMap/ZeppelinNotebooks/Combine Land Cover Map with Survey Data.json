{"paragraphs":[{"title":"Create Case Classes for  Data Inport","text":"import com.esri.core.geometry._\nimport org.apache.spark.sql._\n\ncase class SurveyData(id: String, geometry: com.esri.core.geometry.Geometry, totalRichness: Array[Int], repeatPlo: String)\ncase class Feature(geometry: com.esri.core.geometry.Geometry, distribution: Array[Int], modalClass: Int)\ncase class Combined(point: String, polygon: String, distribution: Array[Int], modalClass: Int, totalRichness: Array[Int], repeatPlo: String)","user":"anonymous","dateUpdated":"2017-06-21T15:54:13+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1498037365278_1890524634","id":"20170619-132623_1185164014","dateCreated":"2017-06-21T09:29:25+0000","dateStarted":"2017-06-21T15:54:13+0000","dateFinished":"2017-06-21T15:54:43+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:50022"},{"title":"Create Data Parsing Functions","text":"def parseFeature(row: Row) : Feature = {\n    val geometryString = row.getAs[String](\"_c0\")\n    val geometry = GeometryEngine.geometryFromWkt(geometryString, WktImportFlags.wktImportDefaults, Geometry.Type.Polygon)\n    val distributionArray = row.getAs[String](\"_c3\").split(\",\").map(_.toInt)\n    val distribution = distributionArray.dropRight(2)\n    val modalClass = distributionArray.takeRight(1)(0)\n\n    Feature(geometry, distribution, modalClass)\n  }\n\ndef parseSurveyRow(row: Row) : SurveyData = {\n    val id = row.getAs[String](\"REP_ID\")\n    val geometryString = row.getAs[String](\"WKT\")\n    val modifiedString = geometryString.split(\" \").dropRight(1).mkString(\" \") + \")\"\n    val geometry = GeometryEngine.geometryFromWkt(modifiedString, WktImportFlags.wktImportDefaults, Geometry.Type.Unknown)\n    val totalRichness = Array[Int](row.getAs[String](\"TOT_RICH78\").toInt, row.getAs[String](\"TOT_RICH90\").toInt,\n                            row.getAs[String](\"TOT_RICH98\").toInt, row.getAs[String](\"TOT_RICH07\").toInt)\n    val repeatPlo = row.getAs[String](\"REPEAT_PLO\")\n    \n    SurveyData(id, geometry, totalRichness, repeatPlo)\n}\n\ndef combine(feature: Feature, surveyData: SurveyData) : Combined = {\n    val point = GeometryEngine.geometryToWkt(surveyData.geometry, WktExportFlags.wktExportPoint)\n    val polygon = GeometryEngine.geometryToWkt(feature.geometry, WktExportFlags.wktExportPolygon)\n    Combined(point, polygon, feature.distribution, feature.modalClass, surveyData.totalRichness, surveyData.repeatPlo)\n}","user":"anonymous","dateUpdated":"2017-06-21T15:54:58+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1498037365284_1874365180","id":"20170619-132708_191963517","dateCreated":"2017-06-21T09:29:25+0000","dateStarted":"2017-06-21T15:54:58+0000","dateFinished":"2017-06-21T15:54:59+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:50023"},{"title":"Load and Join Land Cover Map with Survey Data","text":"\n\nval lcmFilePath = \"/data/LandCoverModel/spark_io/inputData/25m_subset_csv/smallWKT.aa\"\n// val lcmFilePath = \"/data/LandCoverModel/spark_io/inputData/25mcsv/lcm25mWKT.*\"\nval surveyFilePath = \"/data/LandCoverModel/spark_io/inputData/fieldSurvey/FieldSurvey.csv\"\n\nval lcmReader = spark.read.csv(lcmFilePath)\nval lcmData = lcmReader.rdd.map(row => parseFeature(row))\n\nval surveyReader = spark.read.option(\"header\", \"true\").csv(surveyFilePath)\nval surveyData = surveyReader.rdd.map(row => parseSurveyRow(row)).collect()\n\nval bSurveyData = spark.sparkContext.broadcast(surveyData)\n\nval filteredFeatures = lcmData.map(feature => {\n    val pointInFeature: Option[SurveyData] = bSurveyData.value.find(point => {\n        GeometryEngine.contains(feature.geometry, point.geometry, SpatialReference.create(4326))\n    })\n    \n    if (pointInFeature.isDefined) {\n        combine(feature, pointInFeature.get)\n    } else {\n     null\n    }\n}).filter(_ != null)\n\nval outputPath = \"/data/LandCoverModel/spark_io/output\" + System.currentTimeMillis\nfilteredFeatures.map(row => {\n    row.totalRichness.mkString(\",\") + \",\" +\n    \"\\\"\" + row.distribution.mkString(\",\") + \"\\\",\" +\n    row.modalClass + \",\" +\n    row.repeatPlo\n}).saveAsTextFile(outputPath)","user":"anonymous","dateUpdated":"2017-06-22T13:26:35+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1498037365285_1873980431","id":"20170619-132344_155808096","dateCreated":"2017-06-21T09:29:25+0000","dateStarted":"2017-06-21T15:55:01+0000","dateFinished":"2017-06-21T15:55:17+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:50024"},{"dateUpdated":"2017-06-21T09:29:25+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1498037365286_1875134678","id":"20170619-132454_101307222","dateCreated":"2017-06-21T09:29:25+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:50025"}],"name":"Combine Land Cover Map with Survey Data","id":"2CN2FMRFQ","angularObjects":{"2CJCG9YGH:shared_process":[],"2CMMNW7MR:shared_process":[],"2CKEQTZDW:shared_process":[],"2CNKKUJDJ:shared_process":[],"2CK113UY1:shared_process":[],"2CMCUVPQV:shared_process":[],"2CKUQT3KT:shared_process":[],"2CMT2DHBM:shared_process":[],"2CN4BZX5B:shared_process":[],"2CKBH6PKV:shared_process":[],"2CNH6WYSG:shared_process":[],"2CJZHZPXJ:shared_process":[],"2CMUXRQW7:shared_process":[],"2CJDPRR2G:shared_process":[],"2CK3RHEJU:shared_process":[],"2CK68AC9T:shared_process":[],"2CNQJ1MP7:shared_process":[],"2CKEKKSZA:shared_process":[],"2CKV2TXGB:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}