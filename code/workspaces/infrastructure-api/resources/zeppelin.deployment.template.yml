---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: {{ name }}
  name: {{ name }}
spec:
  replicas: 1
  selector:
    matchLabels:
      name: {{ name }}
  template:
    metadata:
      labels:
        name: {{ name }}
        user-pod: {{ type }}
    spec:
      securityContext:
        runAsUser: 0
      initContainers:
        # This container will generate the expected folder structure for the notebooks directory, without this the
        # zepplin container will not start. As the container runs a root these directories are owned by root and can
        # not be written to by datalabs:users (user:group; 1000:100).
        - name: create-notebook-folders
          image: busybox
          imagePullPolicy: IfNotPresent
          command: ["sh"]
          args: ["-c", "mkdir -p /mnt/persistentfs/notebooks/zeppelin"]
          volumeMounts:
            - mountPath: /mnt/persistentfs
              name: persistentfsvol
        # This container sets the folder permissions for the generated notebook directory to be usable by
        # datalabs:users.
        - name: set-directory-permissions
          image: busybox
          imagePullPolicy: IfNotPresent
          command: ["sh"]
          args: ["-c", "chmod 777 /mnt/persistentfs/notebooks && chmod 777 /mnt/persistentfs/notebooks/zeppelin && ln -sfn /assets /mnt/persistentfs/notebooks/zeppelin/assets "]
          volumeMounts:
            - mountPath: /mnt/persistentfs
              name: persistentfsvol
      containers:
        - name: {{ name }}-connect
          image: {{ &zeppelin.connectImage }}
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8000
              protocol: TCP
          env:
            - name: CONNECT_TYPE
              value: ZEPPELIN
          livenessProbe:
            httpGet:
              path: /status
              port: 8000
            initialDelaySeconds: 5
            periodSeconds: 10
        - name:  {{ name }}
          image: {{ &zeppelin.image }}
          imagePullPolicy : IfNotPresent
          ports:
            - containerPort: 8080
              protocol: TCP
          env:
            - name: MASTER
              value: {{ &sparkMasterAddress }}
            - name: SPARK_SUBMIT_OPTIONS
              value: "--packages com.esri.geometry:esri-geometry-api:1.2.1"
            - name: ZEPPELIN_JAVA_OPTS
              value: "-Dshell.command.timeout.millisecs=3600000"
            - name: ZEPPELIN_NOTEBOOK_DIR
              value: /data/notebooks/zeppelin
            - name: SECRET_CONFIG
              value: /secret/shiro.ini
            - name: GRANT_SUDO
              value: "{{ grantSudo }}"
            - name: R_LIBS_USER
              value: {{ &sharedRLibs }}
          resources:
            requests:
              cpu: 200m
              memory: 128Mi
            limits:
              cpu: 2
              memory: 4Gi
          livenessProbe:
            httpGet:
              path: index.html
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 10
          volumeMounts:
            - name: zeppelin-shiro
              mountPath: /secret
{{#volumeMount}}
            - name: persistentfsvol
              mountPath: /data
{{/volumeMount}}
      volumes:
        - name: zeppelin-shiro
          secret:
            secretName: {{ name }}
{{#volumeMount}}
        - name: persistentfsvol
          persistentVolumeClaim:
            claimName: {{ volumeMount }}-claim
{{/volumeMount}}
