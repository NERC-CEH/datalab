---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: {{ name }}
  name: {{ name }}
spec:
  selector:
    matchLabels:
      name: {{ name }}
  template:
    metadata:
      labels:
        name: {{ name }}
        user-pod: {{ type }}
    spec:
      securityContext:
        runAsUser: 0
      serviceAccountName: {{ serviceAccount }}
      initContainers:
        # This container will generate the expected folder structure for the notebooks directory, without this the
        # jupyter container will not start. As the container runs a root these directories are owned by root and can
        # not be written to by datalabs:users (user:group; 1000:100).
        - name: create-notebook-folders
          image: busybox
          imagePullPolicy: IfNotPresent
          command: ["sh"]
          args: ["-c", "mkdir -p /mnt/persistentfs/notebooks/{{ name }}"]
          volumeMounts:
            - mountPath: /mnt/persistentfs
              name: persistentfsvol
        # This container sets the folder permissions for the generated notebook directory to be usable by
        # datalabs:users.
        - name: set-directory-permissions
          image: busybox
          imagePullPolicy: IfNotPresent
          command: ["sh"]
          args: ["-c", "chmod 777 /mnt/persistentfs/notebooks && chmod 777 /mnt/persistentfs/notebooks/{{ name }}"]
          volumeMounts:
            - mountPath: /mnt/persistentfs
              name: persistentfsvol
      containers:
        - image: {{ &jupyter.image }}
          imagePullPolicy : "IfNotPresent"
          name: {{ name }}
          command: ["start.sh",
            "jupyter", "{{ startCmd }}",
            "--NotebookApp.token='$(JUPYTER_TOKEN)'",
            "--NotebookApp.allow_origin='{{ domain }}'",
            "--NotebookApp.notebook_dir='/data/notebooks/{{ name }}'"]
          ports:
            - containerPort: 8888
              protocol: TCP
          env:
            - name: JUPYTER_TOKEN
              valueFrom:
                secretKeyRef:
                  name: {{ name }}
                  key: token
            - name: GRANT_SUDO
              value: "{{ grantSudo }}"
            - name: R_LIBS_USER
              value: "/data/packages/R/%p/%v"
            - name: JUPYTER_DATA_DIR
              value: "/data/.jupyter"
            - name: CONDA_ENV_DIR
              value: "/data/conda/"
            - name: JUPYTER_ALLOW_INSECURE_WRITES
              value: 'true'
          resources:
            requests:
              cpu: 200m
              memory: 128Mi
            limits:
              cpu: 2
              memory: 4Gi
          livenessProbe:
            httpGet:
              path: /
              port: 8888
            initialDelaySeconds: 5
            periodSeconds: 10
          volumeMounts:
            {{#volumeMount}}
            - name: persistentfsvol
              mountPath: /data
            {{/volumeMount}}
            - name: spark-kubernetes-properties
              # /usr/local/spark is default value of $SPARK_HOME set in the
              # base jupyter/pyspark-notebook Dockerfile
              mountPath: /usr/local/spark/conf/spark-defaults.conf
              subPath: spark-defaults.conf
            - name: dask-kubernetes-properties
              mountPath: /opt/conda/etc/dask/dask.yaml
              subPath: dask.yaml
            - name: jupyter-notebook-config
              mountPath: /home/datalab/.jupyter/jupyter_notebook_config.py
              subPath: jupyter-notebook-config.py
      volumes:
        {{#volumeMount}}
        - name: persistentfsvol
          persistentVolumeClaim:
            claimName: {{ volumeMount }}-claim
        {{/volumeMount}}
        - name: spark-kubernetes-properties
          configMap:
            name: {{ pySparkConfigMapName }}
            items:
              - key: config
                path: spark-defaults.conf
        - name: dask-kubernetes-properties
          configMap:
            name: {{ daskConfigMapName }}
            items:
            - key: config
              path: dask.yaml
        - name: jupyter-notebook-config
          configMap:
            name: {{ jupyterConfigMapName }}
            items:
            - key: config
              path: jupyter-notebook-config.py
