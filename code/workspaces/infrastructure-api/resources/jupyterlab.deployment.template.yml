---
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  labels:
    name: {{ name }}
  name: {{ name }}
spec:
  template:
    metadata:
      labels:
        name: {{ name }}
        user-pod: {{ type }}
    spec:
      securityContext:
        runAsUser: 0
      initContainers:
        # This container will generate the expected folder structure for the notebooks directory, without this the
        # jupyter container will not start. As the container runs a root these directories are owned by root and can
        # not be written to by datalabs:users (user:group; 1000:100).
        - name: create-notebook-folders
          image: busybox
          imagePullPolicy: IfNotPresent
          command: ["sh"]
          args: ["-c", "mkdir -p /mnt/glusterfs/notebooks/jupyter"]
          volumeMounts:
            - mountPath: /mnt/glusterfs
              name: glusterfsvol
        # This container correct the folder permissions for the generated notebook directory to be owned by the
        # datalabs:users (user:group; 1000:100).
        - name: set-directory-owner
          image: busybox
          imagePullPolicy: IfNotPresent
          command: ["sh"]
          args: ["-c", "chown 1000:100 /mnt/glusterfs/notebooks && chown 1000:100 /mnt/glusterfs/notebooks/jupyter"]
          volumeMounts:
            - mountPath: /mnt/glusterfs
              name: glusterfsvol
      containers:
        - image: {{ &jupyterlab.imageName }}:{{ jupyterlab.version }}
          imagePullPolicy : "IfNotPresent"
          name: {{ name }}
          command: ["start.sh",
            "jupyter", "lab",
            "--NotebookApp.token='$(JUPYTER_TOKEN)'",
            "--NotebookApp.allow_origin='{{ domain }}'",
            "--NotebookApp.notebook_dir='/data/notebooks/jupyter'"]
          ports:
            - containerPort: 8888
              protocol: TCP
          env:
            - name: JUPYTER_TOKEN
              valueFrom:
                secretKeyRef:
                  name: {{ name }}
                  key: token
            - name: GRANT_SUDO
              value: "{{ grantSudo }}"
            - name: R_LIBS_USER
              value: "/data/packages/R/%p/%v"
            - name: JUPYTER_DATA_DIR
              value: "/data/.jupyter"
            - name: CONDA_ENV_DIR
              value: "/data/conda/"
            - name: PYSPARK_PYTHON
              value: "/usr/bin/python3" #this might be different if it's a conda environment
          resources:
            requests:
              cpu: 200m
              memory: 128Mi
            limits:
              cpu: 2
              memory: 4Gi
          lifecycle:
            postStart:
              exec:
                command: ["/bin/bash", "-c", "/bin/cp $SPARK_HOME/conf/spark-defaults.conf.template $SPARK_HOME/conf/spark-defaults.conf" &&
                          "echo -e 'spark.driver.host {{ name }}-headless.prod.svc.cluster.local
                          \nspark.driver.port 29413
                          \nspark.executor.instances 4
                          \nspark.executor.memory 4g
                          \nspark.kubernetes.authenticate.caCertFile /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                          \nspark.kubernetes.authenticate.oauthTokenFile /var/run/secrets/kubernetes.io/serviceaccount/token
                          \nspark.kubernetes.container.image gcr.io/spark-operator/spark-py:v2.4.0
                          \nspark.kubernetes.executor.limit.cores 2
                          \nspark.kubernetes.executor.request.cores 0.5
                          \nspark.kubernetes.namespace {{project-compute-namespace}}
                          \nspark.kubernetes.pyspark.pythonVersion 3
                          \nspark.master k8s://https://kubernetes.default.svc.cluster.local:443
                          \nspark.submit.deployMode client
                          \nspark.app.name {{ name }}-spark-job' > $SPARK_HOME/conf/spark-defaults.conf"]
          livenessProbe:
            httpGet:
              path: /
              port: 8888
            initialDelaySeconds: 5
            periodSeconds: 10
{{#volumeMount}}
          volumeMounts:
            - mountPath: /data
              name: glusterfsvol
      volumes:
        - name: glusterfsvol
          persistentVolumeClaim:
            claimName: {{ volumeMount }}-claim
{{/volumeMount}}
