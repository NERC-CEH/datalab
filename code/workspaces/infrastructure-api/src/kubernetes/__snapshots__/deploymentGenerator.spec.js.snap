// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`deploymentGenerator createDatalabDaskSchedulerDeployment uses dask image if no volumeMount/condaPath set 1`] = `
"apiVersion: apps/v1
kind: Deployment
metadata:
  name: deployment-name
spec:
  replicas: 1
  selector:
    matchLabels:
      dask-infra: scheduler-pod-label
  template:
    metadata:
      labels:
        dask-infra: scheduler-pod-label
    spec:
      containers:
        - image: dask-image
          command: [\\"bash\\"]
          args: [\\"-c\\", \\"dask-scheduler\\"]
          name: dask-scheduler-cont
          ports:
            - containerPort: 8786
            - containerPort: 8787
          resources:
            requests:
              memory: scheduler-memory
              cpu: scheduler-cpu
            limits:
              memory: scheduler-memory
              cpu: scheduler-cpu
          volumeMounts:
      hostname: dask-scheduler-host
      restartPolicy: Always
      volumes:
"
`;

exports[`deploymentGenerator createDatalabDaskSchedulerDeployment uses jupyter image if volumeMount/condaPath set 1`] = `
"apiVersion: apps/v1
kind: Deployment
metadata:
  name: deployment-name
spec:
  replicas: 1
  selector:
    matchLabels:
      dask-infra: scheduler-pod-label
  template:
    metadata:
      labels:
        dask-infra: scheduler-pod-label
    spec:
      containers:
        - image: lab-image
          command: [\\"bash\\"]
          args: [\\"-c\\", \\"/data/conda/some-env/bin/dask-scheduler\\"]
          name: dask-scheduler-cont
          ports:
            - containerPort: 8786
            - containerPort: 8787
          resources:
            requests:
              memory: scheduler-memory
              cpu: scheduler-cpu
            limits:
              memory: scheduler-memory
              cpu: scheduler-cpu
          volumeMounts:
            - name: persistentfsvol
              mountPath: /data
      hostname: dask-scheduler-host
      restartPolicy: Always
      volumes:
        - name: persistentfsvol
          persistentVolumeClaim:
            claimName: volume-mount-claim
"
`;

exports[`deploymentGenerator createDatalabDaskWorkerDeployment uses dask image if no volumeMount/condaPath set 1`] = `
"apiVersion: apps/v1
kind: Deployment
metadata:
  name: deployment-name
spec:
  replicas: 1
  selector:
    matchLabels:
      dask-infra: worker-pod-label
  template:
    metadata:
      labels:
        dask-infra: worker-pod-label
    spec:
      containers:
        - image: dask-image
          command: [\\"bash\\"]
          args: [\\"-c\\", \\"dask-worker --nthreads n-threads --no-dashboard --memory-limit worker-memory --death-timeout death-timeout-sec tcp://scheduler-service-name:8786\\"]
          name: dask-worker-cont
          resources:
            requests:
              memory: worker-memory
              cpu: worker-cpu
            limits:
              memory: worker-memory
              cpu: worker-cpu
          volumeMounts:
      hostname: dask-worker-host
      restartPolicy: Always
      volumes:
"
`;

exports[`deploymentGenerator createDatalabDaskWorkerDeployment uses jupyter image if volumeMount/condaPath set 1`] = `
"apiVersion: apps/v1
kind: Deployment
metadata:
  name: deployment-name
spec:
  replicas: 1
  selector:
    matchLabels:
      dask-infra: worker-pod-label
  template:
    metadata:
      labels:
        dask-infra: worker-pod-label
    spec:
      containers:
        - image: lab-image
          command: [\\"bash\\"]
          args: [\\"-c\\", \\"/data/conda/some-env/bin/dask-worker --nthreads n-threads --no-dashboard --memory-limit worker-memory --death-timeout death-timeout-sec tcp://scheduler-service-name:8786\\"]
          name: dask-worker-cont
          resources:
            requests:
              memory: worker-memory
              cpu: worker-cpu
            limits:
              memory: worker-memory
              cpu: worker-cpu
          volumeMounts:
            - name: persistentfsvol
              mountPath: /data
      hostname: dask-worker-host
      restartPolicy: Always
      volumes:
        - name: persistentfsvol
          persistentVolumeClaim:
            claimName: volume-mount-claim
"
`;

exports[`deploymentGenerator generates createAutoScaler manifest 1`] = `
"apiVersion: autoscaling/v2beta2
kind: HorizontalPodAutoscaler
metadata:
  name: auto-scaler-name
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: scale-deployment-name
  minReplicas: 1
  maxReplicas: max-replicas
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: target-cpu-utilization
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: target-memory-utilization
  behavior:
    scaleDown:
      stabilizationWindowSeconds: scale-down-window-sec
"
`;

exports[`deploymentGenerator generates createDatalabDaskSchedulerNetworkPolicy manifest 1`] = `
"apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: policy-name
spec:
  podSelector:
    matchLabels:
      dask-infra: scheduler-pod-label
  policyTypes:
  - Ingress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: project-key
    ports:
    - protocol: TCP
      port: 8786
    - protocol: TCP
      port: 8787
"
`;

exports[`deploymentGenerator generates createDatalabDaskSchedulerService manifest 1`] = `
"apiVersion: v1
kind: Service
metadata:
  name: service-name
spec:
  ports:
    - name: \\"client\\"
      port: 8786
      targetPort: 8786
    - name: \\"dashboard\\"
      port: 8787
      targetPort: 8787
  selector:
    dask-infra: scheduler-pod-label
"
`;
