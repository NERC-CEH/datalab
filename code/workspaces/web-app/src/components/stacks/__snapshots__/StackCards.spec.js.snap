// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`StackCards creates correct snapshot for an array of stacks 1`] = `
<div
  className="makeStyles-stackDiv-1"
>
  <PromisedContentWrapper
    fetchingClassName="makeStyles-placeholderCard-2"
    promise={
      Object {
        "fetching": false,
        "value": Array [
          Object {
            "displayName": "name1",
            "id": "1",
            "type": "type1",
          },
          Object {
            "displayName": "name2",
            "id": "2",
            "type": "type2",
          },
          Object {
            "displayName": "name3",
            "id": "3",
            "type": "type3",
          },
        ],
      }
    }
  >
    <Pagination
      items={
        Array [
          <WithStyles(StackCard)
            copySnippets={
              Object {
                "Python": [MockFunction copyPythonSnippet],
              }
            }
            deletePermission="delete"
            deleteStack={[MockFunction deleteStack]}
            editPermission="edit"
            editStack={[MockFunction editStack]}
            openPermission="open"
            openStack={[MockFunction openStack]}
            restartStack={[MockFunction restartStack]}
            stack={
              Object {
                "displayName": "name1",
                "id": "1",
                "type": "type1",
              }
            }
            typeName="expectedTypeName"
            userPermissions={
              Array [
                "open",
                "delete",
                "create",
                "edit",
              ]
            }
          />,
          <WithStyles(StackCard)
            copySnippets={
              Object {
                "Python": [MockFunction copyPythonSnippet],
              }
            }
            deletePermission="delete"
            deleteStack={[MockFunction deleteStack]}
            editPermission="edit"
            editStack={[MockFunction editStack]}
            openPermission="open"
            openStack={[MockFunction openStack]}
            restartStack={[MockFunction restartStack]}
            stack={
              Object {
                "displayName": "name2",
                "id": "2",
                "type": "type2",
              }
            }
            typeName="expectedTypeName"
            userPermissions={
              Array [
                "open",
                "delete",
                "create",
                "edit",
              ]
            }
          />,
          <WithStyles(StackCard)
            copySnippets={
              Object {
                "Python": [MockFunction copyPythonSnippet],
              }
            }
            deletePermission="delete"
            deleteStack={[MockFunction deleteStack]}
            editPermission="edit"
            editStack={[MockFunction editStack]}
            openPermission="open"
            openStack={[MockFunction openStack]}
            restartStack={[MockFunction restartStack]}
            stack={
              Object {
                "displayName": "name3",
                "id": "3",
                "type": "type3",
              }
            }
            typeName="expectedTypeName"
            userPermissions={
              Array [
                "open",
                "delete",
                "create",
                "edit",
              ]
            }
          />,
        ]
      }
      paginationBarItems={
        <ComponentWrapper
          permission="create"
          style={
            Object {
              "width": "100%",
            }
          }
          userPermissions={
            Array [
              "open",
              "delete",
              "create",
              "edit",
            ]
          }
        >
          <NewStackButton
            labelPrefix="Create"
            onClick={[MockFunction openCreationForm]}
            typeName="expectedTypeName"
          />
        </ComponentWrapper>
      }
    />
  </PromisedContentWrapper>
</div>
`;

exports[`StackCards creates correct snapshot for an empty array 1`] = `
<div
  className="makeStyles-stackDiv-1"
>
  <PromisedContentWrapper
    fetchingClassName="makeStyles-placeholderCard-2"
    promise={
      Object {
        "fetching": false,
        "value": Array [],
      }
    }
  >
    <Pagination
      items={
        Array [
          <div
            className="makeStyles-placeholderCard-2"
          >
            <WithStyles(ForwardRef(Typography))
              variant="body1"
            >
              No items to display.
            </WithStyles(ForwardRef(Typography))>
          </div>,
        ]
      }
      paginationBarItems={
        <ComponentWrapper
          permission="create"
          style={
            Object {
              "width": "100%",
            }
          }
          userPermissions={
            Array [
              "open",
              "delete",
              "create",
              "edit",
            ]
          }
        >
          <NewStackButton
            labelPrefix="Create"
            onClick={[MockFunction openCreationForm]}
            typeName="expectedTypeName"
          />
        </ComponentWrapper>
      }
    />
  </PromisedContentWrapper>
</div>
`;

exports[`StackCards creates correct snapshot when no create button 1`] = `
<div
  className="makeStyles-stackDiv-1"
>
  <PromisedContentWrapper
    fetchingClassName="makeStyles-placeholderCard-2"
    promise={
      Object {
        "fetching": false,
        "value": Array [
          Object {
            "displayName": "name1",
            "id": "1",
            "type": "type1",
          },
          Object {
            "displayName": "name2",
            "id": "2",
            "type": "type2",
          },
          Object {
            "displayName": "name3",
            "id": "3",
            "type": "type3",
          },
        ],
      }
    }
  >
    <Pagination
      items={
        Array [
          <WithStyles(StackCard)
            copySnippets={
              Object {
                "Python": [MockFunction copyPythonSnippet],
              }
            }
            deletePermission="delete"
            deleteStack={[MockFunction deleteStack]}
            editPermission="edit"
            editStack={[MockFunction editStack]}
            openPermission="open"
            openStack={[MockFunction openStack]}
            restartStack={[MockFunction restartStack]}
            stack={
              Object {
                "displayName": "name1",
                "id": "1",
                "type": "type1",
              }
            }
            typeName="expectedTypeName"
            userPermissions={
              Array [
                "open",
                "delete",
                "create",
                "edit",
              ]
            }
          />,
          <WithStyles(StackCard)
            copySnippets={
              Object {
                "Python": [MockFunction copyPythonSnippet],
              }
            }
            deletePermission="delete"
            deleteStack={[MockFunction deleteStack]}
            editPermission="edit"
            editStack={[MockFunction editStack]}
            openPermission="open"
            openStack={[MockFunction openStack]}
            restartStack={[MockFunction restartStack]}
            stack={
              Object {
                "displayName": "name2",
                "id": "2",
                "type": "type2",
              }
            }
            typeName="expectedTypeName"
            userPermissions={
              Array [
                "open",
                "delete",
                "create",
                "edit",
              ]
            }
          />,
          <WithStyles(StackCard)
            copySnippets={
              Object {
                "Python": [MockFunction copyPythonSnippet],
              }
            }
            deletePermission="delete"
            deleteStack={[MockFunction deleteStack]}
            editPermission="edit"
            editStack={[MockFunction editStack]}
            openPermission="open"
            openStack={[MockFunction openStack]}
            restartStack={[MockFunction restartStack]}
            stack={
              Object {
                "displayName": "name3",
                "id": "3",
                "type": "type3",
              }
            }
            typeName="expectedTypeName"
            userPermissions={
              Array [
                "open",
                "delete",
                "create",
                "edit",
              ]
            }
          />,
        ]
      }
      paginationBarItems={null}
    />
  </PromisedContentWrapper>
</div>
`;

exports[`StackCards creates correct snapshot with different action button label prefix 1`] = `
<div
  className="makeStyles-stackDiv-1"
>
  <PromisedContentWrapper
    fetchingClassName="makeStyles-placeholderCard-2"
    promise={
      Object {
        "fetching": false,
        "value": Array [],
      }
    }
  >
    <Pagination
      items={
        Array [
          <div
            className="makeStyles-placeholderCard-2"
          >
            <WithStyles(ForwardRef(Typography))
              variant="body1"
            >
              No items to display.
            </WithStyles(ForwardRef(Typography))>
          </div>,
        ]
      }
      paginationBarItems={
        <ComponentWrapper
          permission="create"
          style={
            Object {
              "width": "100%",
            }
          }
          userPermissions={
            Array [
              "open",
              "delete",
              "create",
              "edit",
            ]
          }
        >
          <NewStackButton
            labelPrefix="Request"
            onClick={[MockFunction openCreationForm]}
            typeName="expectedTypeName"
          />
        </ComponentWrapper>
      }
    />
  </PromisedContentWrapper>
</div>
`;
