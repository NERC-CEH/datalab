// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CheckboxCell renders correctly passing props to PermissionsCheckbox in TableCell 1`] = `
<WithStyles(ForwardRef(TableCell))
  align="center"
  key="key"
  padding="checkbox"
>
  <PermissionsCheckbox
    checkboxSpec={
      Object {
        "name": "admin",
        "value": 2,
      }
    }
    classes={
      Object {
        "activeSelection": "active",
        "implicitSelection": "implicit",
      }
    }
    dispatch={[MockFunction]}
    isCurrentUser={false}
    project="project"
    user={
      Object {
        "role": "admin",
      }
    }
  />
</WithStyles(ForwardRef(TableCell))>
`;

exports[`FullWidthRow returns a table row with correct colSpan and content 1`] = `
<WithStyles(ForwardRef(TableRow))>
  <WithStyles(ForwardRef(TableCell))
    align="center"
    colSpan={4}
  >
    <div>
      row content
    </div>
  </WithStyles(ForwardRef(TableCell))>
</WithStyles(ForwardRef(TableRow))>
`;

exports[`FullWidthTextRow returns a table row with correct colSpan and text wrapped in Typography 1`] = `
<FullWidthRow
  numCols={4}
>
  <WithStyles(ForwardRef(Typography))
    variant="body1"
  >
    Text to go in row.
  </WithStyles(ForwardRef(Typography))>
</FullWidthRow>
`;

exports[`PermissionsCheckbox when checkbox user is the current user renders with correct check status and as disabled 1`] = `
<WithStyles(ForwardRef(Checkbox))
  checked={true}
  className="implicit"
  color="default"
  disabled={true}
  onClick={[Function]}
/>
`;

exports[`PermissionsCheckbox when user has rights equal to CheckboxSpec returns an checked active selection check box 1`] = `
<WithStyles(ForwardRef(Checkbox))
  checked={true}
  className="active"
  color="default"
  onClick={[Function]}
/>
`;

exports[`PermissionsCheckbox when user has rights greater than CheckboxSpec returns an checked implicit selection check box 1`] = `
<WithStyles(ForwardRef(Checkbox))
  checked={true}
  className="implicit"
  color="default"
  onClick={[Function]}
/>
`;

exports[`PermissionsCheckbox when user has rights less than CheckboxSpec returns an unchecked check box 1`] = `
<WithStyles(ForwardRef(Checkbox))
  checked={false}
  color="default"
  onClick={[Function]}
/>
`;

exports[`PureUserPermissionsTable renders correctly passing props to children 1`] = `
<div>
  <WithStyles(ForwardRef(Table))>
    <WithStyles(ForwardRef(TableHead))>
      <UserPermissionsTableHead
        classes={
          Object {
            "activeSelection": "activeSelection",
            "implicitSelection": "implicitSelection",
            "tableCell": "tableCell",
            "tableHeader": "tableHeader",
          }
        }
        headings={
          Array [
            Object {
              "checkBoxCol": false,
              "heading": "User Name",
            },
            Object {
              "checkBoxCol": true,
              "heading": "Admin",
            },
            Object {
              "checkBoxCol": true,
              "heading": "User",
            },
            Object {
              "checkBoxCol": true,
              "heading": "Viewer",
            },
            Object {
              "checkBoxCol": true,
              "heading": "",
            },
          ]
        }
      />
    </WithStyles(ForwardRef(TableHead))>
    <WithStyles(ForwardRef(TableBody))>
      <UserPermissionsTableBody
        classes={
          Object {
            "activeSelection": "activeSelection",
            "implicitSelection": "implicitSelection",
            "tableCell": "tableCell",
            "tableHeader": "tableHeader",
          }
        }
        numCols={5}
        users={
          Object {
            "error": null,
            "fetching": Object {
              "error": false,
              "inProgress": false,
            },
            "updating": Object {
              "error": false,
              "inProgress": false,
            },
            "value": Array [],
          }
        }
      />
    </WithStyles(ForwardRef(TableBody))>
  </WithStyles(ForwardRef(Table))>
  <RemoveUserDialog
    classes={
      Object {
        "activeSelection": "activeSelection",
        "implicitSelection": "implicitSelection",
        "tableCell": "tableCell",
        "tableHeader": "tableHeader",
      }
    }
  />
</div>
`;

exports[`RemoveUserButtonCell renders as disabled when on the row of the current user 1`] = `
<WithStyles(ForwardRef(TableCell))
  align="center"
  className="tableCell"
  padding="checkbox"
>
  <WithStyles(ForwardRef(IconButton))
    disabled={true}
    onClick={[Function]}
  >
    <WithStyles(ForwardRef(Icon))>
      remove_circle_outline
    </WithStyles(ForwardRef(Icon))>
  </WithStyles(ForwardRef(IconButton))>
</WithStyles(ForwardRef(TableCell))>
`;

exports[`RemoveUserDialog when the dialog state has open equal to false renders as null 1`] = `""`;

exports[`RemoveUserDialog when the dialog state has open equal to true and a user set renders to match snapshot 1`] = `
<WithStyles(ForwardRef(Dialog))
  open={true}
>
  <WithStyles(ForwardRef(DialogTitle))>
    Remove User Permissions?
  </WithStyles(ForwardRef(DialogTitle))>
  <WithStyles(ForwardRef(DialogContent))>
    <WithStyles(ForwardRef(DialogContentText))>
      Are you sure you want to remove all project permissions for User One?
    </WithStyles(ForwardRef(DialogContentText))>
  </WithStyles(ForwardRef(DialogContent))>
  <WithStyles(ForwardRef(DialogActions))>
    <WithStyles(ForwardRef(Button))
      id="cancel-button"
      onClick={[Function]}
    >
      Cancel
    </WithStyles(ForwardRef(Button))>
    <WithStyles(ForwardRef(Button))
      className="dialogDeleteUserButton"
      id="confirm-button"
      onClick={[Function]}
      variant="outlined"
    >
      Confirm
    </WithStyles(ForwardRef(Button))>
  </WithStyles(ForwardRef(DialogActions))>
</WithStyles(ForwardRef(Dialog))>
`;

exports[`UserPermissionsTableBody when fetching data renders progress indicator 1`] = `
<FullWidthRow
  numCols={5}
>
  <WithStyles(ForwardRef(CircularProgress)) />
</FullWidthRow>
`;

exports[`UserPermissionsTableBody when there are users correctly renders row for each user 1`] = `
Array [
  <UserPermissionsTableRow
    classes={
      Object {
        "activeSelection": "activeSelection",
        "implicitSelection": "implicitSelection",
        "tableCell": "tableCell",
        "tableHeader": "tableHeader",
      }
    }
    dispatch={[MockFunction]}
    index={0}
    isCurrentUser={true}
    project="project"
    setRemoveUserDialogState={[MockFunction]}
    user={
      Object {
        "name": "admin name",
        "role": "admin",
        "userId": "admin-user-id",
      }
    }
  />,
  <UserPermissionsTableRow
    classes={
      Object {
        "activeSelection": "activeSelection",
        "implicitSelection": "implicitSelection",
        "tableCell": "tableCell",
        "tableHeader": "tableHeader",
      }
    }
    dispatch={[MockFunction]}
    index={1}
    isCurrentUser={false}
    project="project"
    setRemoveUserDialogState={[MockFunction]}
    user={
      Object {
        "name": "user name",
        "role": "user",
      }
    }
  />,
  <UserPermissionsTableRow
    classes={
      Object {
        "activeSelection": "activeSelection",
        "implicitSelection": "implicitSelection",
        "tableCell": "tableCell",
        "tableHeader": "tableHeader",
      }
    }
    dispatch={[MockFunction]}
    index={2}
    isCurrentUser={false}
    project="project"
    setRemoveUserDialogState={[MockFunction]}
    user={
      Object {
        "name": "viewer name",
        "role": "viewer",
      }
    }
  />,
]
`;

exports[`UserPermissionsTableBody when there is an error fetching renders correctly displaying there is an error 1`] = `
<FullWidthTextRow
  numCols={5}
>
  Error fetching data. Please try refreshing the page.
</FullWidthTextRow>
`;

exports[`UserPermissionsTableHead renders correct header bar based on column headings 1`] = `
<WithStyles(ForwardRef(TableRow))>
  <WithStyles(ForwardRef(TableCell))
    align="left"
    className="tableCell"
    key="header-0"
    padding={null}
  >
    <WithStyles(ForwardRef(Typography))
      className="tableHeader"
      variant="body1"
    >
      not check box
    </WithStyles(ForwardRef(Typography))>
  </WithStyles(ForwardRef(TableCell))>
  <WithStyles(ForwardRef(TableCell))
    align="center"
    className="tableCell"
    key="header-1"
    padding="checkbox"
  >
    <WithStyles(ForwardRef(Typography))
      className="tableHeader"
      variant="body1"
    >
      check box col
    </WithStyles(ForwardRef(Typography))>
  </WithStyles(ForwardRef(TableCell))>
</WithStyles(ForwardRef(TableRow))>
`;

exports[`UserPermissionsTableRow for a given user correctly renders passing props to children when not current user 1`] = `
<WithStyles(ForwardRef(TableRow))
  key="row-2"
>
  <WithStyles(ForwardRef(TableCell))
    className="tableCell"
    key="row-2-username"
  >
    <WithStyles(ForwardRef(Typography))
      variant="body1"
    >
      admin name
    </WithStyles(ForwardRef(Typography))>
  </WithStyles(ForwardRef(TableCell))>
  <CheckboxCell
    cellKey="row-2-admin"
    checkboxSpec={
      Object {
        "name": "admin",
        "value": 2,
      }
    }
    classes={
      Object {
        "activeSelection": "activeSelection",
        "implicitSelection": "implicitSelection",
        "tableCell": "tableCell",
      }
    }
    dispatch={[MockFunction]}
    isCurrentUser={false}
    key="row-2-admin"
    project="project"
    user={
      Object {
        "name": "admin name",
        "role": "admin",
      }
    }
  />
  <CheckboxCell
    cellKey="row-2-user"
    checkboxSpec={
      Object {
        "name": "user",
        "value": 1,
      }
    }
    classes={
      Object {
        "activeSelection": "activeSelection",
        "implicitSelection": "implicitSelection",
        "tableCell": "tableCell",
      }
    }
    dispatch={[MockFunction]}
    isCurrentUser={false}
    key="row-2-user"
    project="project"
    user={
      Object {
        "name": "admin name",
        "role": "admin",
      }
    }
  />
  <CheckboxCell
    cellKey="row-2-viewer"
    checkboxSpec={
      Object {
        "name": "viewer",
        "value": 0,
      }
    }
    classes={
      Object {
        "activeSelection": "activeSelection",
        "implicitSelection": "implicitSelection",
        "tableCell": "tableCell",
      }
    }
    dispatch={[MockFunction]}
    isCurrentUser={false}
    key="row-2-viewer"
    project="project"
    user={
      Object {
        "name": "admin name",
        "role": "admin",
      }
    }
  />
  <RemoveUserButtonCell
    classes={
      Object {
        "activeSelection": "activeSelection",
        "implicitSelection": "implicitSelection",
        "tableCell": "tableCell",
      }
    }
    isCurrentUser={false}
    setRemoveUserDialogState={[MockFunction]}
    user={
      Object {
        "name": "admin name",
        "role": "admin",
      }
    }
  />
</WithStyles(ForwardRef(TableRow))>
`;
