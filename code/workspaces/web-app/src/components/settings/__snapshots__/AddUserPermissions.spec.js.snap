// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AddUserButton renders as disabled when the selected user name is not in the list of possibilities 1`] = `
<WithStyles(ForwardRef(Button))
  className="addButton"
  color="primary"
  disabled={true}
  onClick={[Function]}
  variant="outlined"
>
  Add
</WithStyles(ForwardRef(Button))>
`;

exports[`AddUserButton renders as not disabled when the selected user name is in the list of possibilities 1`] = `
<WithStyles(ForwardRef(Button))
  className="addButton"
  color="primary"
  disabled={false}
  onClick={[Function]}
  variant="outlined"
>
  Add
</WithStyles(ForwardRef(Button))>
`;

exports[`PermissionsSelector renders to match snapshot 1`] = `
<WithStyles(ForwardRef(TextField))
  className="makeStyles-permissionsSelector-4"
  label="Permissions"
  margin="dense"
  onChange={[Function]}
  select={true}
  value="Viewer"
  variant="outlined"
>
  <WithStyles(ForwardRef(MenuItem))
    key="Admin"
    value="Admin"
  >
    Admin
  </WithStyles(ForwardRef(MenuItem))>
  <WithStyles(ForwardRef(MenuItem))
    key="User"
    value="User"
  >
    User
  </WithStyles(ForwardRef(MenuItem))>
  <WithStyles(ForwardRef(MenuItem))
    key="Viewer"
    value="Viewer"
  >
    Viewer
  </WithStyles(ForwardRef(MenuItem))>
</WithStyles(ForwardRef(TextField))>
`;

exports[`PureAddUserPermission renders to match snapshot 1`] = `
<div
  className="makeStyles-addUserPermission-1"
>
  <UsersAutofill
    setSelectedUserName={[MockFunction]}
    userNames={
      Array [
        "Test User One",
        "Test User Two",
      ]
    }
  />
  <PermissionsSelector
    className="makeStyles-permissionsSelector-4"
    permissionLevels={
      Array [
        "Admin",
        "User",
        "Viewer",
      ]
    }
    selectedPermissions="Viewer"
    setSelectedPermissions={[MockFunction]}
  />
  <AddUserButton
    classes={
      Object {
        "addButton": "makeStyles-addButton-6",
        "addUserPermission": "makeStyles-addUserPermission-1",
        "dropDownClosed": "makeStyles-dropDownClosed-2",
        "dropDownOpen": "makeStyles-dropDownOpen-3",
        "permissionsSelector": "makeStyles-permissionsSelector-4",
        "usersAutofill": "makeStyles-usersAutofill-5",
      }
    }
    dispatch={[MockFunction]}
    onClickFn={[Function]}
    project="project"
    selectedPermissions="Viewer"
    selectedUserName=""
    userInformation={
      Array [
        Object {
          "name": "Test User One",
          "userId": "test-user-one",
        },
        Object {
          "name": "Test User Two",
          "userId": "test-user-two",
        },
      ]
    }
  />
</div>
`;

exports[`UsersAutofill renders to match snapshot 1`] = `
<div
  aria-expanded={false}
  aria-haspopup="listbox"
  aria-labelledby="downshift-0-label"
  aria-owns={null}
  className="makeStyles-usersAutofill-5"
  role="combobox"
>
  <WithStyles(ForwardRef(TextField))
    aria-activedescendant={null}
    aria-autocomplete="list"
    aria-controls={null}
    aria-labelledby="downshift-0-label"
    autoComplete="off"
    fullWidth={true}
    id="downshift-0-input"
    label="Add User"
    margin="dense"
    onBlur={[Function]}
    onChange={[Function]}
    onKeyDown={[Function]}
    placeholder="Type user's email..."
    value=""
    variant="outlined"
  />
  <UsersDropdown
    getItemProps={[Function]}
    getMenuProps={[Function]}
    inputValue=""
    isOpen={false}
    userNames={
      Array [
        "Test User One",
        "Test User Two",
      ]
    }
  />
</div>
`;

exports[`UsersDropdown renders as closed when there are no items matching the input value 1`] = `
<WithStyles(ForwardRef(Paper))
  className="makeStyles-dropDownClosed-2"
/>
`;

exports[`UsersDropdown renders only items containing the input value 1`] = `
<WithStyles(ForwardRef(Paper))
  className="makeStyles-dropDownOpen-3"
>
  <WithStyles(ForwardRef(MenuItem))
    item="Test User One"
    key="Test User One"
  >
    Test User One
  </WithStyles(ForwardRef(MenuItem))>
</WithStyles(ForwardRef(Paper))>
`;

exports[`UsersDropdown renders to match snapshot when it is not open 1`] = `
<WithStyles(ForwardRef(Paper))
  className="makeStyles-dropDownClosed-2"
/>
`;

exports[`UsersDropdown renders to match snapshot when it is open 1`] = `
<WithStyles(ForwardRef(Paper))
  className="makeStyles-dropDownOpen-3"
>
  <WithStyles(ForwardRef(MenuItem))
    item="Test User One"
    key="Test User One"
  >
    Test User One
  </WithStyles(ForwardRef(MenuItem))>
  <WithStyles(ForwardRef(MenuItem))
    item="Test User Two"
    key="Test User Two"
  >
    Test User Two
  </WithStyles(ForwardRef(MenuItem))>
</WithStyles(ForwardRef(Paper))>
`;
