// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AddUserButton renders as disabled with explanatory tooltip when the selected user name is not in the list of possibilities 1`] = `
<WithStyles(ForwardRef(Tooltip))
  placement="top"
  title="Please enter a registered user's email."
>
  <div>
    <PrimaryActionButton
      className="addButton"
      disabled={true}
      onClick={[Function]}
    >
      Add
    </PrimaryActionButton>
  </div>
</WithStyles(ForwardRef(Tooltip))>
`;

exports[`AddUserButton when selected user is the current user renders as disabled with explanatory tooltip when the current user is not system admin 1`] = `
<WithStyles(ForwardRef(Tooltip))
  placement="top"
  title="You can not add permissions for yourself."
>
  <div>
    <PrimaryActionButton
      className="addButton"
      disabled={true}
      onClick={[Function]}
    >
      Add
    </PrimaryActionButton>
  </div>
</WithStyles(ForwardRef(Tooltip))>
`;

exports[`AddUserButton when selected user is the current user renders as not disabled when the current user is system admin 1`] = `
<WithStyles(ForwardRef(Tooltip))
  placement="top"
  title=""
>
  <div>
    <PrimaryActionButton
      className="addButton"
      disabled={false}
      onClick={[Function]}
    >
      Add
    </PrimaryActionButton>
  </div>
</WithStyles(ForwardRef(Tooltip))>
`;

exports[`AddUserButton when the selected user is not the current user renders as not disabled when the selected user name is in the list of possibilities 1`] = `
<WithStyles(ForwardRef(Tooltip))
  placement="top"
  title=""
>
  <div>
    <PrimaryActionButton
      className="addButton"
      disabled={false}
      onClick={[Function]}
    >
      Add
    </PrimaryActionButton>
  </div>
</WithStyles(ForwardRef(Tooltip))>
`;

exports[`AddUserPermissions renders pure component with correct props 1`] = `
<PureAddUserPermission
  classes={
    Object {
      "addButton": "AddUserPermission-addButton-6",
      "addUserPermission": "AddUserPermission-addUserPermission-1",
      "dropDownClosed": "AddUserPermission-dropDownClosed-2",
      "dropDownOpen": "AddUserPermission-dropDownOpen-3",
      "permissionsSelector": "AddUserPermission-permissionsSelector-4",
      "usersAutofill": "AddUserPermission-usersAutofill-5",
    }
  }
  currentUserId="current-user-id"
  currentUserSystemAdmin="current-user-system-admin"
  dispatch={[MockFunction dispatch]}
  permissionLevels={
    Array [
      "Admin",
      "User",
      "Viewer",
    ]
  }
  projectKey="testproj"
  selectedPermissions="Viewer"
  selectedUser={null}
  setSelectedPermissions={[Function]}
  setSelectedUser={[Function]}
/>
`;

exports[`PermissionsSelector renders to match snapshot 1`] = `
<StyledTextField
  className="permissionsSelector"
  label="Permissions"
  onChange={[Function]}
  select={true}
  value="Viewer"
>
  <WithStyles(ForwardRef(MenuItem))
    key="Admin"
    value="Admin"
  >
    Admin
  </WithStyles(ForwardRef(MenuItem))>
  <WithStyles(ForwardRef(MenuItem))
    key="User"
    value="User"
  >
    User
  </WithStyles(ForwardRef(MenuItem))>
  <WithStyles(ForwardRef(MenuItem))
    key="Viewer"
    value="Viewer"
  >
    Viewer
  </WithStyles(ForwardRef(MenuItem))>
</StyledTextField>
`;

exports[`PureAddUserPermission renders to match snapshot 1`] = `
<div
  className="addUserPermission"
>
  <UserSelect
    className="usersAutofill"
    label="Add User"
    placeholder="Type user's email..."
    selectedUsers={
      Object {
        "name": "Test User One",
        "userId": "test-user-one",
      }
    }
    setSelectedUsers={[MockFunction setSelectedUser]}
  />
  <PermissionsSelector
    className="permissionsSelector"
    classes={
      Object {
        "addButton": "addButton",
        "addUserPermission": "addUserPermission",
        "dropDownClosed": "dropDownClosed",
        "dropDownOpen": "dropDownOpen",
        "permissionsSelector": "permissionsSelector",
        "usersAutofill": "usersAutofill",
      }
    }
    permissionLevels={
      Array [
        "Admin",
        "User",
        "Viewer",
      ]
    }
    selectedPermissions="Viewer"
    setSelectedPermissions={[MockFunction setSelectedPermissions]}
  />
  <AddUserButton
    classes={
      Object {
        "addButton": "addButton",
        "addUserPermission": "addUserPermission",
        "dropDownClosed": "dropDownClosed",
        "dropDownOpen": "dropDownOpen",
        "permissionsSelector": "permissionsSelector",
        "usersAutofill": "usersAutofill",
      }
    }
    dispatch={[MockFunction dispatch]}
    onClickFn={[Function]}
    projectKey="projectKey"
    selectedPermissions="Viewer"
    selectedUser={
      Object {
        "name": "Test User One",
        "userId": "test-user-one",
      }
    }
  />
</div>
`;
