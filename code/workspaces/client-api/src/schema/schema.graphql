# Root query methods for DataLabs.
type Query {
    # Status string to confirm GraphQL server is running.
    status: String

    # List of currently provisioned DataLabs data storage.
    dataStorage(projectKey: String!): [DataStore]

    # Details of a single Datalabs data store.
    dataStore(projectKey: String!, id: ID!): DataStore

    # Details of a single currently provisioned DataLab Stack owned by user.
    stack(projectKey: String!, id: ID!): Stack

    # List of currently provisioned DataLabs Stacks owned by user.
    stacks(projectKey: String!): [Stack]

    # List of currently provisioned DataLabs Stacks owned by user for the requested category.
    stacksByCategory(params: StacksByCategoryRequest): [Stack]

    # Details for a single Datalab.
    datalab(name: String!): Datalab

    # List of DataLabs.
    datalabs: [Datalab]

    # List permissions of current user
    userPermissions: [String]

    # Get all users and roles
    allUsersAndRoles: [UserAndRoles]

    # Checks internal name is unique.
    checkNameUniqueness(projectKey: String!, name: String!): Boolean

    # Retrieve pod logs
    logs(projectKey: String!, name: String!): String

    # List of users within the current DataLab
    users: [User]

    # List of projects where the user is a member
    projects: [Project]

    # Details of a single project
    project(projectKey: String!): Project

    # All projects and resources
    allProjectsAndResources: AllProjectsAndResources

    # Checks project key is unique
    checkProjectKeyUniqueness(projectKey: String!): Boolean
}

# Root mutation methods for Datalabs.
type Mutation {
    # Create a new stack
    createStack(stack: StackCreationRequest): Stack

    # Update a stack
    updateStack(stack: StackUpdateRequest): Stack

    # Delete a stack
    deleteStack(stack: StackDeletionRequest): Stack

    # Restart a stack
    restartStack(stack: StackRestartRequest): Stack

    # Create a new data store
    createDataStore(projectKey: String!, dataStore: DataStorageCreationRequest): DataStore

    # Delete a data store
    deleteDataStore(projectKey: String!, dataStore: DataStorageUpdateRequest): DataStore

    # Grant user access to data store
    addUserToDataStore(projectKey: String!, dataStore: DataStorageUpdateRequest): DataStore

    # Remove user access to data store
    removeUserFromDataStore(projectKey: String!, dataStore: DataStorageUpdateRequest): DataStore

    # Update the details of a data store
    updateDataStoreDetails(projectKey: String!, name: String!, updatedDetails: DataStorageUpdateRequest): DataStore

    # Create a new project
    createProject(project: ProjectCreationRequest): Project

    # Update a project
    updateProject(project: ProjectUpdateRequest): Project

    # Delete a project
    deleteProject(project: ProjectDeletionRequest): Boolean

    # Add a user permission to a project
    addProjectPermission(permission: PermissionAddRequest): Permission

    # Remove a user permission from a project
    removeProjectPermission(permission: PermissionRemoveRequest): Boolean

    # Create a central asset repo metadata
    createCentralAssetMetadata(metadata: CentralAssetMetadataCreationRequest!): CentralAssetMetadata!

    # Set instanceAdmin role
    setInstanceAdmin(userId: ID!, instanceAdmin: Boolean!): UserAndRoles!

    # Set dataManager role
    setDataManager(userId: ID!, dataManager: Boolean!): UserAndRoles!

    # Set catalogueRole
    setCatalogueRole(userId: ID!, catalogueRole: CatalogueRole!): UserAndRoles!
}

# DataLabs type for basic datalab information.
type Datalab {
    name: String
    domain: String
}

# Type to describe the mutation for creating a new data store
input DataStorageCreationRequest {
    name: String
    displayName: String
    description: String
    type: String
    volumeSize: Int
}

# Type to describe the mutation for updating or deleting a data store
input DataStorageUpdateRequest {
    name: String
    displayName: String
    description: String
    users: [String]
}

# DataLabs data store type for retrieval.
type DataStore {
    id: ID
    projectKey: String
    name: String
    displayName: String
    description: String
    type: String
    volumeSize: Int
    url: String
    internalEndpoint: String
    users: [String]
    accessKey: String
    stacksMountingStore: [Stack]
    status: StatusType
}

# Type to represent online Stacks
type Stack {
    projectKey: String
    id: ID
    name: String
    displayName: String
    description: String
    type: String
    category: String
    users: [String]
    url: String
    internalEndpoint: String
    sourcePath: String
    isPublic: Boolean
    redirectUrl: String
    volumeMount: String
    status: StatusType
    shared: VisibilityType
    visible: VisibilityType
    version: String
}

input StacksByCategoryRequest {
    projectKey: String
    category: String
}

# Type to describe the mutation for creating a new Stack.
input StackCreationRequest {
    projectKey: String
    displayName: String
    name: String
    type: String
    version: String
    description: String
    sourcePath: String
    isPublic: Boolean
    volumeMount: String
    shared: VisibilityType
    visible: VisibilityType
}

# Type to describe the mutation for updating a new Stack.
input StackUpdateRequest {
    projectKey: String
    name: String
    displayName: String
    description: String
    shared: VisibilityType
}

# Type to describe the mutation for deleting a new Stack.
input StackDeletionRequest {
    projectKey: String
    name: String
    type: String
}

# Type to describe the mutation for deleting a new Stack.
input StackRestartRequest {
    projectKey: String
    name: String
    type: String
}

# Status classes within DataLabs
enum StatusType {
    # Resource has been requested
    requested

    # Resource is being created
    creating

    # Resource is ready for use
    ready

    # Resource is currently unavailable
    unavailable
}

# Sharing and visibility classes within Datalabs
enum VisibilityType {
  # Resource is only accessibe by the user who owns it
  private

  # Resoure is accessible by all users in the same project
  project

  # Resouce is accessible by everyone
  public
}

# Type to represent Auth0 User
type User {
    userId: ID
    name: String!
    permissions: [Permission!]!
}

type Project {
    id: ID!
    key: String!
    name: String!
    description: String
    collaborationLink: String
    tags: [String]
    accessible: Boolean!
    projectUsers: [ProjectUser!]
}

# Type to describe the mutation for creating a new Project
input ProjectCreationRequest {
    projectKey: String!
    name: String!
    description: String
    tags: [String!]
    collaborationLink: String
}

# Type to describe the mutation for updating a Project
input ProjectUpdateRequest {
    projectKey: String!
    name: String!
    description: String
    tags: [String!]
    collaborationLink: String
}

# Type to describe the project for deletion
input ProjectDeletionRequest {
    projectKey: String!
}

type Permission {
    projectKey: String,
    role: ProjectRole!,
    userId: ID
}

type ProjectUser {
    userId: ID!
    name: String!
    role: ProjectRole!
}

type Resource {
    projectKey: String!,
    name: String!
}

type ProjectPermission {
    projectKey: String!,
    role: ProjectRole!,
}

type UserAndRoles {
    instanceAdmin: Boolean
    dataManager: Boolean
    catalogueRole: CatalogueRole
    userId: ID!
    name: String
    projectRoles: [ProjectPermission]
}

type AllProjectsAndResources {
    projects: [Project!]
    storage: [DataStore!]
    stacks: [Stack!]
}

input PermissionAddRequest {
    projectKey: String!,
    userId: ID!
    role: ProjectRole!
}

input PermissionRemoveRequest {
    projectKey: String!,
    userId: ID!
}

enum ProjectRole {
    admin,
    user,
    viewer,
}

enum CatalogueRole {
    admin,
    publisher,
    editor,
    user
}

type CentralAssetMetadata {
    assetId: String!
    name: String!
    version: String!
    type: String!
    fileLocation: String
    masterUrl: String
    masterVersion: String
    owners: [String]!
    visible: String!
    projects: [String]
    registrationDate: String!
}

input CentralAssetMetadataCreationRequest {
    name: String!
    version: String!
    type: String!
    fileLocation: String
    masterUrl: String
    masterVersion: String
    owners: [String]!
    visible: String!
    projects: [String]
}
